// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: merc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MercService_MyMethod_FullMethodName = "/grpc.MercService/MyMethod"
)

// MercServiceClient is the client API for MercService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercServiceClient interface {
	MyMethod(ctx context.Context, in *MercRequestMessage, opts ...grpc.CallOption) (*MercResponseMessage, error)
}

type mercServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMercServiceClient(cc grpc.ClientConnInterface) MercServiceClient {
	return &mercServiceClient{cc}
}

func (c *mercServiceClient) MyMethod(ctx context.Context, in *MercRequestMessage, opts ...grpc.CallOption) (*MercResponseMessage, error) {
	out := new(MercResponseMessage)
	err := c.cc.Invoke(ctx, MercService_MyMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercServiceServer is the server API for MercService service.
// All implementations must embed UnimplementedMercServiceServer
// for forward compatibility
type MercServiceServer interface {
	MyMethod(context.Context, *MercRequestMessage) (*MercResponseMessage, error)
	mustEmbedUnimplementedMercServiceServer()
}

// UnimplementedMercServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMercServiceServer struct {
}

func (UnimplementedMercServiceServer) MyMethod(context.Context, *MercRequestMessage) (*MercResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedMercServiceServer) mustEmbedUnimplementedMercServiceServer() {}

// UnsafeMercServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercServiceServer will
// result in compilation errors.
type UnsafeMercServiceServer interface {
	mustEmbedUnimplementedMercServiceServer()
}

func RegisterMercServiceServer(s grpc.ServiceRegistrar, srv MercServiceServer) {
	s.RegisterService(&MercService_ServiceDesc, srv)
}

func _MercService_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MercRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercServiceServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercService_MyMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercServiceServer).MyMethod(ctx, req.(*MercRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MercService_ServiceDesc is the grpc.ServiceDesc for MercService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MercService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MercService",
	HandlerType: (*MercServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _MercService_MyMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merc.proto",
}
